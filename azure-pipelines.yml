trigger:
  - main
  - develop

variables:
  FRONTEND_DIRECTORY: 'frontend'
  BACKEND_DIRECTORY: 'backend'

stages:
  - stage: Build
    jobs:
      - job: BuildFrontend
        displayName: 'Build Frontend'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '18.x'
            displayName: 'Install Node.js'

          - script: |
              cd $(FRONTEND_DIRECTORY)
              npm ci
            displayName: 'Install Dependencies'

          - script: |
              cd $(FRONTEND_DIRECTORY)
              npm run build
            displayName: 'Build Frontend'

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: '$(FRONTEND_DIRECTORY)/build'
              artifact: 'frontend-build'
              publishLocation: 'pipeline'

      - job: BuildBackend
        displayName: 'Build Backend'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: JavaToolInstaller@0
            inputs:
              versionSpec: '17'
              jdkArchitectureOption: 'x64'
              jdkSourceOption: 'PreInstalled'
            displayName: 'Install JDK'

          - task: Maven@3
            inputs:
              mavenPomFile: '$(BACKEND_DIRECTORY)/pom.xml'
              goals: 'clean package'
              publishJUnitResults: true
              testResultsFiles: '**/surefire-reports/TEST-*.xml'
              javaHomeOption: 'JDKVersion'
              mavenVersionOption: 'Default'
              mavenAuthenticateFeed: false
              effectivePomSkip: false
              sonarQubeRunAnalysis: false
            displayName: 'Build Backend'

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: '$(BACKEND_DIRECTORY)/target/*.jar'
              artifact: 'backend-build'
              publishLocation: 'pipeline'

  - stage: Test
    dependsOn: Build
    jobs:
      - job: TestFrontend
        displayName: 'Test Frontend'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '18.x'
            displayName: 'Install Node.js'

          - script: |
              cd $(FRONTEND_DIRECTORY)
              npm ci
              npm test -- --watchAll=false
            displayName: 'Run Frontend Tests'

      - job: TestBackend
        displayName: 'Test Backend'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: JavaToolInstaller@0
            inputs:
              versionSpec: '17'
              jdkArchitectureOption: 'x64'
              jdkSourceOption: 'PreInstalled'
            displayName: 'Install JDK'

          - task: Maven@3
            inputs:
              mavenPomFile: '$(BACKEND_DIRECTORY)/pom.xml'
              goals: 'test'
              publishJUnitResults: true
              testResultsFiles: '**/surefire-reports/TEST-*.xml'
              javaHomeOption: 'JDKVersion'
              mavenVersionOption: 'Default'
              mavenAuthenticateFeed: false
              effectivePomSkip: false
              sonarQubeRunAnalysis: false
            displayName: 'Run Backend Tests'

  - stage: Deploy
    dependsOn: Test
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    jobs:
      - deployment: DeployToProduction
        displayName: 'Deploy to Production'
        environment: 'production'
        pool:
          vmImage: 'ubuntu-latest'
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: 'frontend-build'
                - download: current
                  artifact: 'backend-build'
                # Aquí puedes agregar los pasos específicos para tu despliegue
                # Por ejemplo, desplegar a Azure App Service, Azure Container Apps, etc. 